<% if events
     data_events = events.map do |event|
       [event.event,
        event.actions.map do |action|
          require_relative "actions/#{action.type}"
          # Deligate the action data to each action class
          # [Type, URL, Options, Params] these are passed into javascript event/action class constructors
          # Only the type need be canonical, the reset is defined between this class and its javascript
          Object.const_get("::Actions::#{inflector.camelize(action.type)}").new.call(action, parent_id, @grid_nesting)
          # additional_options = case action.type.to_s
          #                       when 'replaces' then
          #                         {grid_nesting:@grid_nesting, __parent_id__: parent_id}
          #                       when 'update', 'post', 'delete' then
          #                         {__parent_id__: parent_id}
          #                       else
          #                         {}
          #                     end
          # [action.type, action.url, action.options.to_h.merge(additional_options), action.params.to_h]
        end,
       {once: false}]
     end %>
  data-events = '<%= data_events.to_json %>'
<% end %>
